AWSTemplateFormatVersion: 2010-09-09
Description: Single instance deployment with AWS CodeDeploy based on environment tagging.

Parameters:
  Environment:
    Description: What environment should be created?
    Type: String
    AllowedValues:
    - review
    - staging
    - production
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: With which KeyName would you like to access the instances?
  SSHLocation:
    Description: What is your IP Adress range to access the instances via ssh?
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-657bd20a
    eu-central-2:
      AMI: ami-657bd20a
    eu-central-3:
      AMI: ami-657bd20a

Resources:
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      IamInstanceProfile:
        Ref: InstanceProfile
      Tags:
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex
            yum update -y aws-cfn-bootstrap
            yum install -y aws-cli
            function error_exit {
              opt/aws/bin/cfn-signal -e 1 -r $1 --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
              exit 1
            }
            cd /home/ec2-user/
            aws configure set default.s3.signature_version s3v4 || error_exit 'Failed to set aws cli signature to version 4'
            aws s3 cp 's3://aws-codedeploy-eu-central-1/latest/codedeploy-agent.noarch.rpm' . --region eu-central-1 || error_exit 'Failed to download AWS CodeDeployAgent.'
            yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.'
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r LaunchConfig --region ${AWS::Region} || error_exit 'Failed to run cfn-init.'
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and outbound access via http/s
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  InstancePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - s3:Get*
            - s3:List*
          Resource:
            - arn:aws:s3:::aws-codedeploy-eu-central-1/*
      Roles:
      - Ref: InstanceProfileRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: InstanceProfileRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: !Ref Environment
      ApplicationName:
        Ref: CodeDeployApplication
      Ec2TagFilters:
        -
          Key: Environment
          Value: !Ref Environment
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codedeploy.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - autoscaling:CompleteLifecycleAction
          - autoscaling:DeleteLifecycleHook
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:DescribeLifecycleHooks
          - autoscaling:PutLifecycleHook
          - autoscaling:RecordLifecycleActionHeartbeat
          - autoscaling:CreateAutoScalingGroup
          - autoscaling:UpdateAutoScalingGroup
          - autoscaling:EnableMetricsCollection
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:DescribePolicies
          - autoscaling:DescribeScheduledActions
          - autoscaling:DescribeNotificationConfigurations
          - autoscaling:DescribeLifecycleHooks
          - autoscaling:SuspendProcesses
          - autoscaling:ResumeProcesses
          - autoscaling:AttachLoadBalancers
          - autoscaling:PutScalingPolicy
          - autoscaling:PutScheduledUpdateGroupAction
          - autoscaling:PutNotificationConfiguration
          - autoscaling:PutLifecycleHook
          - autoscaling:DescribeScalingActivities
          - autoscaling:DeleteAutoScalingGroup
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:TerminateInstances
          - tag:GetTags
          - tag:GetResources
          - sns:Publish
          - cloudwatch:DescribeAlarms
          - cloudwatch:PutMetricAlarm
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeInstanceHealth
          - elasticloadbalancing:RegisterInstancesWithLoadBalancer
          - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DeregisterTargets
          Resource: "*"
      Roles:
      - Ref: CodeDeployServiceRole
